/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gateway.proto */

#ifndef PROTOBUF_C_gateway_2eproto__INCLUDED
#define PROTOBUF_C_gateway_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Proto__UplinkFrame Proto__UplinkFrame;
typedef struct _Proto__DownlinkFrame Proto__DownlinkFrame;
typedef struct _Proto__Payload Proto__Payload;


/* --- enums --- */

typedef enum _Proto__Category {
  PROTO__CATEGORY__CMD = 0,
  PROTO__CATEGORY__CONFIG = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__CATEGORY)
} Proto__Category;
typedef enum _Proto__Device {
  PROTO__DEVICE__LAMP = 0,
  PROTO__DEVICE__HEATER = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__DEVICE)
} Proto__Device;
typedef enum _Proto__Operation {
  PROTO__OPERATION__OFF = 0,
  PROTO__OPERATION__ON = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO__OPERATION)
} Proto__Operation;

/* --- messages --- */

/*
 *message是固定的。UserInfo是类名，可以随意指定，符合规范即可
 */
struct  _Proto__UplinkFrame
{
  ProtobufCMessage base;
  /*
   *消息
   */
  int32_t frametype;
  /*
   * 这个设备类型可以不传递给终端
   */
  char *devname;
  /*
   *这个设备id可以不传递给终端
   */
  char *devid;
  /*
   *消息计数
   */
  uint32_t framenum;
  /*
   *端口
   */
  uint32_t port;
  ProtobufCBinaryData phypayload;
  uint32_t uplinkid;
};
#define PROTO__UPLINK_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__uplink_frame__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, {0,NULL}, 0 }


struct  _Proto__DownlinkFrame
{
  ProtobufCMessage base;
  /*
   *消息
   */
  int32_t frametype;
  /*
   * 这个设备类型可以不传递给终端
   */
  char *devname;
  /*
   *这个设备id可以不传递给终端
   */
  char *devid;
  /*
   *消息计数
   */
  uint32_t framenum;
  uint32_t port;
  ProtobufCBinaryData phypayload;
  uint32_t downlinkid;
};
#define PROTO__DOWNLINK_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__downlink_frame__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, {0,NULL}, 0 }


struct  _Proto__Payload
{
  ProtobufCMessage base;
  /*
   *种类
   */
  uint32_t kind;
  /*
   *字段
   */
  uint32_t key;
  /*
   *值
   */
  ProtobufCBinaryData val;
};
#define PROTO__PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__payload__descriptor) \
    , 0, 0, {0,NULL} }


/* Proto__UplinkFrame methods */
void   proto__uplink_frame__init
                     (Proto__UplinkFrame         *message);
size_t proto__uplink_frame__get_packed_size
                     (const Proto__UplinkFrame   *message);
size_t proto__uplink_frame__pack
                     (const Proto__UplinkFrame   *message,
                      uint8_t             *out);
size_t proto__uplink_frame__pack_to_buffer
                     (const Proto__UplinkFrame   *message,
                      ProtobufCBuffer     *buffer);
Proto__UplinkFrame *
       proto__uplink_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__uplink_frame__free_unpacked
                     (Proto__UplinkFrame *message,
                      ProtobufCAllocator *allocator);
/* Proto__DownlinkFrame methods */
void   proto__downlink_frame__init
                     (Proto__DownlinkFrame         *message);
size_t proto__downlink_frame__get_packed_size
                     (const Proto__DownlinkFrame   *message);
size_t proto__downlink_frame__pack
                     (const Proto__DownlinkFrame   *message,
                      uint8_t             *out);
size_t proto__downlink_frame__pack_to_buffer
                     (const Proto__DownlinkFrame   *message,
                      ProtobufCBuffer     *buffer);
Proto__DownlinkFrame *
       proto__downlink_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__downlink_frame__free_unpacked
                     (Proto__DownlinkFrame *message,
                      ProtobufCAllocator *allocator);
/* Proto__Payload methods */
void   proto__payload__init
                     (Proto__Payload         *message);
size_t proto__payload__get_packed_size
                     (const Proto__Payload   *message);
size_t proto__payload__pack
                     (const Proto__Payload   *message,
                      uint8_t             *out);
size_t proto__payload__pack_to_buffer
                     (const Proto__Payload   *message,
                      ProtobufCBuffer     *buffer);
Proto__Payload *
       proto__payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__payload__free_unpacked
                     (Proto__Payload *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Proto__UplinkFrame_Closure)
                 (const Proto__UplinkFrame *message,
                  void *closure_data);
typedef void (*Proto__DownlinkFrame_Closure)
                 (const Proto__DownlinkFrame *message,
                  void *closure_data);
typedef void (*Proto__Payload_Closure)
                 (const Proto__Payload *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    proto__category__descriptor;
extern const ProtobufCEnumDescriptor    proto__device__descriptor;
extern const ProtobufCEnumDescriptor    proto__operation__descriptor;
extern const ProtobufCMessageDescriptor proto__uplink_frame__descriptor;
extern const ProtobufCMessageDescriptor proto__downlink_frame__descriptor;
extern const ProtobufCMessageDescriptor proto__payload__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_gateway_2eproto__INCLUDED */
